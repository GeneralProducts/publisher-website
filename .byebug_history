c
product_node.at_xpath('CollateralDetail/SupportingResource/ResourceVersion/ResourceLink').text
product_node.at_xpath('CollateralDetail/SupportingResource/ResourceVersion/ResourceLink')
product_node.at_xpath('CollateralDetail/SupportingResource')
c
product_node.at_xpath('CollateralDetail/SupportingResource')
c
product_node.at_xpath('CollateralDetail/SupportingResource')
c
product_node.at_xpath('CollateralDetail/SupportingResource')
product_node.at_xpath('CollateralDetail')
product_node.at_xpath('CollateralDetail/SupportingResource')
product_node.at_xpath('CollateralDetail/SupportingResource/ResourceVersion')
product_node.at_xpath('CollateralDetail/SupportingResource/ResourceVersion/ResourceLink')
c
cc
c
cc
c
product.xpath('TitleElement/TitleWithoutPrefix').textc
product.xpath('/TitleElement/TitleWithoutPrefix').text
product.xpath('TitleElement/TitleWithoutPrefix').text
product.xpath('//TitleElement/TitleWithoutPrefix').text
c
product.xpath('//TitleElement/TitleWithoutPrefix').text
product.xpath('TitleElement/TitleWithoutPrefix').text
product.xpath('//TitleElement/TitleWithoutPrefix').text
product.xpath('/TitleElement/TitleWithoutPrefix').text
c
processed_data.to_json
processed_data
processed_data.to_json
c
cc
c
product.xpath('//TitleElement/TitleWithoutPrefix').text
product.xpath('//TitleElement/TitleWithoutPrefix')
product.xpath('//TitleElement/TitleWithoutPrefix'
c
product.xpath("//RecordReference")
product
c
product.class
product.xpath("RecordReference")
product.xpath("//RecordReference")
product.xpath("/RecordReference")
product.xpath("RecordReference")
product
product.xpath("//Market")
product.xpath("//title")
product
c
parsed_raw_data.xpath("/xmlns:ONIXMessage")c
parsed_raw_data.xpath("/xmlns:ONIXMessage/xmlns:Product").count
parsed_raw_data.xpath("/xmlns:ONIXMessage/xmlns:Product")
parsed_raw_data.xpath("/xmlns:ONIXMessage")
parsed_raw_data.xpath("//ONIXMessage")
parsed_raw_data.xpath("/ONIXMessage")
parsed_raw_data
c
parsed_raw_data.xpath("//ONIXMessage/Product").count
parsed_raw_data.xpath("/ONIXMessage/Product").count
parsed_raw_data.xpath("ONIXMessage/Product").count
parsed_raw_data
c
      total_products = parsed_raw_data.xpath("//Product|//product").count
      total_products = doc.xpath("//Product|//product").count
parsed_raw_data.xpath("//ProductIdentifier")
parsed_raw_data.xpath("//Product")
parsed_raw_data.class
parsed_raw_data.xpath("product")
parsed_raw_data.xpath("/product")
parsed_raw_data.xpath("//product")
parsed_raw_data
c
parsed_raw_data.xpath("//product")
parsed_raw_data.xpath("product")
parsed_raw_data.class
parsed_raw_data.map {|d| puts d}
parsed_raw_data[0]
parsed_raw_data
parsed_raw_data.map {|group| group.map { |product| product["title"]}}
}
          "title"                 => sanitise(product["full_title"]),}}
parsed_raw_data.map {|group| group.map { |product| {
parsed_raw_data.map do |group|
parsed_raw_data
exit
(product["all_related_products"])
(product["all_related_products"].find_all {|x| x["relation_code"] == "06"}.map {|x| x["isbn"] }.flatten.join(', '))
(product["all_related_products"].find_all {|x| x["relation_code"] == "06"}.map {|x| x["isbn"] }.flatten.join(', ')
(product["all_related_products"].find_all {|x| x["relation_code"] == "06"}.map {|x| x["isbn"] })
(product["all_related_products"].find_all {|x| x["relation_code"] == "06"}.map {|x| x["isbn"] }.flatten)
(product["all_related_products"].find_all {|x| x["relation_code"] == "06"}.map {|x| [x["isbn"],'|'] }.flatten)
(product["all_related_products"].find_all {|x| x["relation_code"] == "06"}.map {|x| [x["isbn"],'|'] }.flatten 
exit
c
product["all_related_products"].find_all {|x| x["relation_code"] == "06"}.map {|x| x["isbn"]}
product["all_related_products"].find_all {|x| x["relation_code"] == "06"}.map
product["all_related_products"].find_all {|x| x["relation_code"] == "06"}.map(&:isbn)
product["all_related_products"].find_all {|x| x["relation_code"] == "06"}
product["all_related_products"]
product["all_related_products"].find_all {|x| x["relation_code"] == "06"}["isbn"]
c
product.count
product.class
product
c
array.to_json
array.class
array
c
JSON.parse(bibliocloud_data(page: page + 1))
bibliocloud_data(page: page + 1)
snipped_bibliocloud_data(page: page + 1)
page
c
page + 1
page
c
cc
c
JSON.parse(bibliocloud_data(page: 4))["products"]
c
JSON.parse(bibliocloud_data(page: 1))["products"]
JSON.parse(bibliocloud_data(page: 1))
JSON.parse(bibliocloud_data(page: 1))["products"].valid?
JSON.parse(bibliocloud_data(page: 1))["products"]
bibliocloud_data(page: 1)["products"]
bibliocloud_data(page: 1)
c
JSON.parse(parsed_raw_data)["products"]
JSON.parse(parsed_raw_data)
parsed_raw_data.count
parsed_raw_data
c
File.open("_data/processed_books.json", "w") do |output|
c
;2D;2Dc
snipped_bibliocloud_data(page: page)
c
array[0]
array
c
JSON.parse(bibliocloud_data(page: page))["products"]
JSON.parse(bibliocloud_data(page: page))
bibliocloud_data(page: page)
page
c
page
c
snipped_bibliocloud_data(page: page)
page
c
json_parse_raw_data["products"]
output
c
output
json_parse_raw_data["products"]
c
product["marketingtexts"].find {|x| x["code"] == "08"}["external_text"]
product["extents"]["page_count"]
((product["supportingresources"][0]["style_urls"].find {|x| x['style'] == 'jpg_rgb_0650h'}["url"]) if product["supportingresources"][0])
c
product["supportingresources"][0]
product["subtitle"]
"https://www.amazon.co.uk/dp/#{Lisbn.new(product["isbn"]).isbn10}"
product["full_title"]
product
